#!/usr/bin/env python3

# A quck and dirty python script for grabbing Kibana status.
# This is meant to be called from an alias, but there's nothing stopping you from running it directly
import sys
import json
import argparse
import urllib.request
from urllib.error import URLError, HTTPError
import base64

parser = argparse.ArgumentParser(description='Read Kibana overall status.')
parser.add_argument('Host', metavar='H', type=str, nargs='?',
                    help='Kibana hostname')
parser.add_argument('User', metavar='U', type=str, nargs='?',
                    help='Kibana Username')
parser.add_argument('Password', metavar='P', type=str, nargs='?',
                    help='Kibana Password')
args = parser.parse_args()

print(args.Host)

req = urllib.request.Request(args.Host + "/api/status")
if args.User is not None and args.Password is not None:
    encoded_str = "{}:{}".format(args.User, args.Password).encode("ascii")
    encodedAuth = base64.b64encode(encoded_str)
    req.add_header("Authorization", 'Basic %s' % encodedAuth.decode("ascii"))

try:
    res = urllib.request.urlopen(req)
except HTTPError as e:
    print("HTTP Error: " + e.reason)
except URLError as e:
    print("Error reaching Kibana: " + e.reason)


if res.status != 200:
    print("Got status: " + res.status())
    print(res.read())
    sys.exit(1)

obj = json.load(res)["status"]["overall"]
print(json.dumps(obj, sort_keys=True, indent=4))
